#
# Sam's crustify config
#
code_width                      = 200

indent_with_tabs = 0		# 1=indent to level only, 2=indent with tabs
input_tab_size = 4		# original tab size
output_tab_size = 4		# new tab size
indent_continue = output_tab_size # if 0 incorrect
indent_columns = output_tab_size
indent_switch_case = output_tab_size

indent_label			= 2		# pos: absolute col, neg: relative column
nl_max = 3

indent_paren_nl = true
indent_paren_open_brace = true

mod_sort_using = true
mod_remove_empty_return = true
mod_remove_extra_semicolon = true
mod_paren_on_return = true
mod_full_brace_if_chain = false


nl_class_leave_one_liners = true
nl_assign_leave_one_liners = true 
nl_collapse_empty_body = true
nl_getset_leave_one_liners = true
nl_if_leave_one_liners = true
nl_after_semicolon = true

nl_start_of_file                = remove
nl_end_of_file                  = remove

sp_else_brace = remove
sp_brace_else = remove

sp_cmt_cpp_start                = add

cmt_star_cont			= FALSE

nl_for_brace = a

nl_func_def_paren                        = remove
nl_func_def_start                        = remove
nl_func_def_args                         = remove
nl_func_def_end                          = remove

#align_var_class_span = 2 # for type definiton
#align_var_class_thresh = 20 # same as above

indent_namespace    = true
indent_class        = true

nl_enum_brace			= remove	# "enum {" vs "enum \n {"
nl_union_brace			= remove	# "union {" vs "union \n {"
nl_struct_brace			= add	# "struct {" vs "struct \n {"
nl_class_brace			= add	# "class {" vs "class \n {"
nl_do_brace			= remove	# "do {" vs "do \n {"
nl_if_brace			= remove	# "if () {" vs "if () \n {"
nl_for_brace			= remove	# "for () {" vs "for () \n {"
nl_else_brace			= remove	# "else {" vs "else \n {"
nl_while_brace			= remove	# "while () {" vs "while () \n {"
nl_switch_brace			= remove	# "switch () {" vs "switch () \n {"
nl_func_var_def_blk		= 1
nl_before_case			= 1
nl_fcall_brace			= remove	# "foo() {" vs "foo()\n{"
nl_fdef_brace			= add		# "int foo() {" vs "int foo()\n{"
# nl_after_return			= TRUE
nl_brace_while			= remove
nl_brace_else			= remove
nl_squeeze_ifdef		= TRUE


mod_paren_on_return		= remove		# "return 1;" vs "return (1);"
# mod_full_brace_if		= add		# "if (a) a--;" vs "if (a) { a--; }"
# mod_full_brace_for		= add		# "for () a--;" vs "for () { a--; }"
mod_full_brace_do		= add		# "do a--; while ();" vs "do { a--; } while ();"
# mod_full_brace_while		= add		# "while (a) a--;" vs "while (a) { a--; }"

sp_before_semi			= remove
sp_paren_paren			= remove	# space between (( and ))
sp_return_paren			= force	# "return (1);" vs "return(1);"
sp_sizeof_paren			= remove	# "sizeof (int)" vs "sizeof(int)"
sp_before_sparen		= force		# "if (" vs "if("
sp_after_sparen			= force		# "if () {" vs "if (){"
sp_after_cast			= remove	# "(int) a" vs "(int)a"
sp_inside_braces		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_struct		= force		# "{ 1 }" vs "{1}"
sp_inside_braces_enum		= force		# "{ 1 }" vs "{1}"
sp_inside_paren			= remove
sp_inside_fparen		= remove
sp_inside_sparen		= remove
sp_inside_square		= remove
sp_before_square		= add
#sp_type_func			= ignore
sp_assign			= force
sp_arith			= force
sp_bool				= force
sp_compare			= force
sp_assign			= force
sp_after_comma			= force
sp_func_def_paren		= force		# "int foo (){" vs "int foo(){"
sp_func_call_paren		= remove		# "foo (" vs "foo("
sp_func_proto_paren		= force		# "int foo ();" vs "int foo();"

sp_before_square = remove

# align_with_tabs			= FALSE		# use tabs to align
# align_on_tabstop		= FALSE		# align on tabstops
# align_enum_equ_span		= 4
# align_nl_cont			= TRUE
# align_var_def_span		= 2
align_var_def_inline		= TRUE
align_var_def_star		= TRUE
align_var_def_colon		= TRUE
# align_assign_span		= 1
# align_struct_init_span		= 3
# align_var_struct_span		= 3
# align_right_cmt_span		= 3
# align_pp_define_span		= 3
# align_pp_define_gap		= 4
# align_number_right		= TRUE
# align_typedef_span		= 5
# align_typedef_gap		= 3


eat_blanks_before_close_brace	= TRUE
eat_blanks_after_open_brace	= TRUE
